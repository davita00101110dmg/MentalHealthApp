//
//  RegistrationViewController.swift
//  MentalHealthApp
//
//  Created by Dato Khvedelidze on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationDisplayLogic: AnyObject {
    func displayRegistrationOutcome(viewModel: Registration.RegistrationValidation.ViewModel)
}

final class RegistrationViewController: UIViewController {
    // MARK: - Clean Components
    
    var interactor: RegistrationBusinessLogic?
    var router: RegistrationRoutingLogic?
    
    // MARK: - Outlets
    
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var lastnameTextField: UITextField!
    @IBOutlet weak var emailTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var confirmPasswordTextField: UITextField!
    @IBOutlet weak var loginSuggestionLabel: UILabel!
    @IBOutlet weak var registrationOutcomeLabel: UILabel!
    @IBOutlet weak var signupButton: UIButton!
    
    // MARK: - Object Lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Relationships
    
    private func setup() {
        let viewController = self
        let interactor = RegistrationInteractor()
        let presenter = RegistrationPresenter()
        let router = RegistrationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupElements()
    }
    
    // MARK: - Private Methods
    
    private func setupTextFieldDelegates() {
        self.nameTextField.delegate = self
        self.lastnameTextField.delegate = self
        self.emailTextField.delegate = self
        self.passwordTextField.delegate = self
        self.confirmPasswordTextField.delegate = self
    }
    
    private func setupElements() {
        self.navigationController?.isNavigationBarHidden = true
        self.view.backgroundColor = Constant.Color.mainColor
    
        registrationOutcomeLabel.alpha = 0
        
        Utilities.customLabel(for: titleLabel, size: 30, text: "Create your account")
        Utilities.customTextField(for: nameTextField, placeholder: "First Name")
        Utilities.customTextField(for: lastnameTextField, placeholder: "Last Name")
        Utilities.customTextField(for: emailTextField, placeholder: "Email")
        Utilities.customTextField(for: passwordTextField, placeholder: "Password")
        Utilities.customTextField(for: confirmPasswordTextField, placeholder: "Confirm Password")
        Utilities.customLabel(for: loginSuggestionLabel, size: 20, text: "Already have an account? Sign in here!")
        Utilities.customLabel(for: registrationOutcomeLabel, size: 20, text: "Please fill all the fields correctly!")
        Utilities.customButton(for: signupButton, title: "Sign Up", cornerRadius: 20, color: Constant.Color.redColor)
        Utilities.highlightedText(for: loginSuggestionLabel, text: "Sign in")
        Utilities.setupTapGestureHideKeyboard(self)
        Utilities.setupTapGestureToChangeView(self, loginSuggestionLabel, #selector(gestureTapped))
    }
    
    internal func switchBasedNextTextField(for textField: UITextField) {
        switch textField {
        case self.nameTextField:
            self.lastnameTextField.becomeFirstResponder()
        case self.lastnameTextField:
            self.emailTextField.becomeFirstResponder()
        case self.emailTextField:
            self.passwordTextField.becomeFirstResponder()
        case self.passwordTextField:
            self.confirmPasswordTextField.becomeFirstResponder()
        default:
            self.view.endEditing(true)
        }
    }
    
    // MARK: - Actions
    
    @IBAction func signupButtonPressed(_ sender: Any) {
        let validateRegistrationRequest = Registration.RegistrationValidation.Request(firstname: nameTextField.text,
                                                                     lastname: lastnameTextField.text,
                                                                     email: emailTextField.text,
                                                                     password: passwordTextField.text,
                                                                     confirmPassword: confirmPasswordTextField.text)
        interactor?.validateRegistration(request: validateRegistrationRequest)
    }
}

// MARK: - RegistrationDisplayLogic

extension RegistrationViewController: RegistrationDisplayLogic {
    func displayRegistrationOutcome(viewModel: Registration.RegistrationValidation.ViewModel) {
        Utilities.showOutcume(for: registrationOutcomeLabel, message: viewModel.outcome!, isError: viewModel.isError)
        
        if !viewModel.isError {
            router?.routeToLoginVC()
        }
    }
}

// MARK: - RegistrationRoutingLogic

extension RegistrationViewController {
    @objc func gestureTapped() {
        router?.routeToLoginVC()
    }
}

// MARK: - UITextFieldDelegate

extension RegistrationViewController: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.switchBasedNextTextField(for: textField)
        return true
    }
    
}
