//
//  RegistrationInteractor.swift
//  MentalHealthApp
//
//  Created by Dato Khvedelidze on 03.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationBusinessLogic {
    func validateRegistration(request: Registration.RegistrationValidation.Request)
}

final class RegistrationInteractor {
    //MARK: - Clean Components
    
    var presenter: RegistrationPresentationLogic?
    var worker: RegistrationWorkerLogic?
}

// MARK: - RegistrationBusinessLogic

extension RegistrationInteractor: RegistrationBusinessLogic {
    
    func validateRegistration(request: Registration.RegistrationValidation.Request) {
        guard let firstname = request.firstname?.trimmingCharacters(in: .whitespacesAndNewlines),
              let lastname = request.lastname?.trimmingCharacters(in: .whitespacesAndNewlines),
              let email = request.email?.trimmingCharacters(in: .whitespacesAndNewlines),
              let password = request.password?.trimmingCharacters(in: .whitespacesAndNewlines),
              let confirmPassword = request.confirmPassword?.trimmingCharacters(in: .whitespacesAndNewlines) else { return }
        
        if firstname == "" ||
            lastname == "" ||
            email == "" ||
            password == "" ||
            confirmPassword == "" {

            presenter?.presentRegistrationOutcome(response: Registration.RegistrationValidation.Response(outcome: Constant.ValidationOutcome.notAllFieldsFilled, isError: true))
        }

        else if Utilities.isPasswordValid(password) == false {
            presenter?.presentRegistrationOutcome(response: Registration.RegistrationValidation.Response(outcome: Constant.ValidationOutcome.passwordNotSecure, isError: true))
        }

        else if password != confirmPassword {
            presenter?.presentRegistrationOutcome(response: Registration.RegistrationValidation.Response(outcome: Constant.ValidationOutcome.passwordsNotMatch, isError: true))
        }
        
        else {
            worker = RegistrationWorker()
            worker?.registerUser(withEmail: email, password: password, firstname: firstname, lastname: lastname) { [weak self] (outcome, isError) in
                self?.presenter?.presentRegistrationOutcome(response: Registration.RegistrationValidation.Response(outcome: outcome, isError: isError))
            }
        }
    }
}
